#!/bin/sh
#
# $FreeBSD$
#

## Redefine environment variables here to override prototypes
## defined in release.sh.
#load_chroot_env() { }
#load_target_env() { }
#buildenv_setup() { }

OPBSD_NAME_TAG=`git tag --contains HEAD | awk '/^opBSD-([0-9]*-STABLE|11-CURRENT)-v[0-9]*(.[0-9]*)?$/{print $1}'`
OPBSD_DATE_TAG=`git tag --contains HEAD | awk '/^opbsd-([0-9]*-stable|master)-[0-9]*-[0-9]$/{print $1}'`

case ${OPBSD_DATE_TAG} in
	*10-stable*)
		OPBSD_BRANCH="opbsd/10-stable/master"
                if [ -z "${OPBSD_NAME_TAG}" ]
                then
                        OPBSD_LAST_COMMIT=`git rev-parse ${OPBSD_BRANCH}`
                        OPBSD_NAME_TAG=`git tag --sort="v:refname" | awk '/^opBSD-10-STABLE-v[0-9]*(.[0-9]*)?$/{print $1}' | tail -1`+S${OPBSD_LAST_COMMIT}
		fi
		;;
	*11-stable*)
		OPBSD_BRANCH="opbsd/11-stable/master"
                if [ -z "${OPBSD_NAME_TAG}" ]
                then
                        OPBSD_LAST_COMMIT=`git rev-parse ${OPBSD_BRANCH}`
                        OPBSD_NAME_TAG=`git tag --sort="v:refname" | awk '/^opBSD-11-STABLE-v[0-9]*(.[0-9]*)?$/{print $1}' | tail -1`+S${OPBSD_LAST_COMMIT}
		fi
		;;
	opbsd-master-*)
		OPBSD_BRANCH="opbsd/current/master"
                if [ -z "${OPBSD_NAME_TAG}" ]
                then
                        OPBSD_LAST_COMMIT=`git rev-parse ${OPBSD_BRANCH}`
                        OPBSD_NAME_TAG=`git tag --sort="v:refname" | awk '/^opBSD-11-CURRENT-v[0-9]*(.[0-9]*)?$/{print $1}' | tail -1`+S${OPBSD_LAST_COMMIT}
		fi
		;;
	*)
		echo "unknown branch..."
		exit 1;
		;;
esac


CHROOTDIR="/usr/data/release/scratch/${OPBSD_DATE_TAG}"

# XXX dirty hack to get the chrootdir from relese.sh
echo "c:${CHROOTDIR} b:${OPBSD_BRANCH} n:${OPBSD_NAME_TAG} t:${OPBSD_DATE_TAG}" 1>&9

SVNROOT=

VCSCMD="/usr/local/bin/git clone --branch ${OPBSD_BRANCH}"
SRCBRANCH="/usr/data/source/git/opBSD/opBSD.git"
DOCBRANCH="https://github.com/freebsd/freebsd-doc"
PORTBRANCH="https://github.com/freebsd/freebsd-ports"

## Set to override the default target architecture.
TARGET="amd64"
TARGET_ARCH="amd64"
KERNEL="OP-HBSD"

## Set to specify a custom make.conf and/or src.conf
#MAKE_CONF="/etc/local/make.conf"
#SRC_CONF="/etc/local/src.conf"

## Set to use make(1) flags.
#MAKE_FLAGS="-s"

## Set to use world- and kernel-specific make(1) flags.
#WORLD_FLAGS="-j $(sysctl -n hw.ncpu)"
#KERNEL_FLAGS="-j $(( $(( $(sysctl -n hw.ncpu) + 1 )) / 2 ))"

## Set miscellaneous 'make release' settings.
NODOC=true
NOPORTS=true
#WITH_DVD=
#WITH_COMPRESSED_IMAGES=

## Set to '1' to disable multi-threaded xz(1) compression.
#XZ_THREADS=0

## Set when building embedded images.
#EMBEDDEDBUILD=

## Set to skip the chroot environment buildworld/installworld/distribution
## step if it is expected the build environment will exist via alternate
## means.
#CHROOTBUILD_SKIP=

## Set to a non-empty value skip checkout or update of /usr/src in
## the chroot.  This is intended for use when /usr/src already exists.
#SRC_UPDATE_SKIP=

## Set to a non-empty value skip checkout or update of /usr/doc in
## the chroot.  This is intended for use when /usr/doc already exists.
#DOC_UPDATE_SKIP=

## Set to a non-empty value skip checkout or update of /usr/ports in
## the chroot.  This is intended for use when /usr/ports already exists.
#PORTS_UPDATE_SKIP=

## Set to pass additional flags to make(1) for the build chroot setup, such
## as TARGET/TARGET_ARCH.
#CHROOT_MAKEENV=""

## Set to a non-empty value to build virtual machine images as part of the
## release build.
#WITH_VMIMAGES=

## Set to a non-empty value to compress virtual machine images with xz(1)
## as part of the release build.
#WITH_COMPRESSED_VMIMAGES=

## If WITH_VMIMAGES is set to a non-empty value, this is the name of the
## file to use for the installed userland/kernel.
#VMBASE="vm"

## If WITH_VMIMAGES is set to a non-empty value, this is the size of the
## virtual machine disk filesystem.  Valid size values are described in
## the truncate(1) manual page.
#VMSIZE="20G"

## If WITH_VMIMAGES is set to a non-empty value, this is a list of disk
## image formats to create.  Valid values are listed in the mkimg(1)
## manual page, as well as 'mkimg --formats' output.
#VMFORMATS="vhdf vmdk qcow2 raw"

## Set to a non-empty value to build virtual machine images for various
## cloud providers as part of the release build.
#WITH_CLOUDWARE=

## If WITH_CLOUDWARE is set to a non-empty value, this is a list of providers
## to create disk images.
#CLOUDWARE="AZURE OPENSTACK"
